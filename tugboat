#!/bin/bash

# If the user chooses to update a stack(s)
if [[ "$1" == "update" ]]; then
    
    mkdir -p /var/tmp/tugboat/$2
    rsync ~/.tugboat/stacks/$2.yml /var/tmp/tugboat/$2/docker-compose.yml

    # Recreate the stack in the the case that changes have been made to the docker compose file
    cd /var/tmp/tugboat && docker compose up -d > /dev/null

    # Pull the images and store the result in a variable
    pull=$(cd /var/tmp/tugboat/$2/ && docker compose pull 2>&1)
    # Create a variable to check if the pull is complete
    complete='Pull complete'

    # Use the regular expression to check that it has been pulled
    if [[ $pull =~ $complete ]]; then
        # Log if the pull was successful
        echo "Pulled new images, updating $2" >> /var/log/tugboat

        # Attempt to start the stack
        up=$(cd /var/tmp/tugboat/$2 && docker compose up -d 2>&1)
        started="Started"
        running="Running"
        if [[ $up =~ $started ]]; then
            echo "Successfully started stack $2" >> /var/log/tugboat
        elif [[ $up =~ $running ]]; then
            echo "Stack $2 is running" >> /var/log/tugboat
        fi
    else
        # In the case that the stack is up to date
        echo "$2 is already up to date" >> /var/log/tugboat
        # Start it in case it has not been started already
        up=$(cd /var/tmp/tugboat/$2 && docker compose up -d 2>&1)
        started="Started"
        running="Running"
        if [[ $up =~ $running ]]; then
            echo "Stack $2 is running" >> /var/log/tugboat
        fi
    fi

# If the user chooses to start a stack(s)
elif [[ "$1" == "start" ]]; then
    
    # Make a directory for the stack chosen
    mkdir -p /var/tmp/tugboat/$2
    rsync ~/.tugboat/stacks/$2.yml /var/tmp/tugboat/$2/docker-compose.yml
    # Attempt to start the stack
    up=$(cd /var/tmp/tugboat/$2 && docker compose up -d 2>&1)
    started="Started"
    running="Running"
    if [[ $up =~ $started ]]; then
        echo "Successfully started stack $2" >> /var/log/tugboat
    elif [[ $up =~ $running ]]; then
        echo "Stack $2 is running" >> /var/log/tugboat
    fi

# If the user chooses to stop a stack(s)
elif [[ "$1" == "stop" ]]; then
    
    # Stop the chosen stack
    down=$(cd /var/tmp/tugboat/$2 && docker compose down 2>&1)
    removed="Removed"
    if [[ $down =~ $removed ]]; then
        echo "Successfully stopped stack $2" >> /var/log/tugboat
    fi

# If the user wishes to update configuration from a git repository
elif [[ "$1" == "update-config" ]]; then
    clone=$(git clone $2 ~/.tugboat 2>&1)
    exists="already exists and is not an empty directory."
    done="done"
    cloning="Cloning into"
    if [[ $clone =~ $exists || $clone =~ $done || $clone =~ $cloning ]]; then
        pull=$(cd ~/.tugboat && git pull 2>&1)
        uptodate="Already up to date."
        if [[ ! $pull =~ $uptodate ]]; then
            echo "Updated config"
            echo $pull
        fi
    else
        echo "Error updating config, $clone" >> /var/log/tugboat
    fi

# If the user wishes to view logs
elif [[ "$1" == "logs" ]]; then
    if [[ "$2" == "clear" ]]; then
        echo " " > /var/log/tugboat
    else
        echo "You are now viewing the logs in real time, press CTRL+C to quit"
        echo
        tail -f /var/log/tugboat
    fi
else
    echo "Invalid command"
fi